{"version":3,"sources":["components/Graph.js","components/Cron.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Graph","props","colorBase","integratedChartData","labels","values","colors","rgbValue","this","push","dataObject","label","data","backgroundColor","pop","a","j","x","i","length","Math","floor","random","num","round","shuffle","dateParameter","today","Date","getDate","getMonth","getFullYear","Component","Cron","parser","require","crons","cron_label","cron_expression","parseExpression","dataSetArray","run","color","random_rgba","dataSetObject","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","pointHitDetectionRadius","interval","next","isToday","getHours","y","getMinutes","options","scales","yAxes","type","time","unit","distribution","xAxisValues","state","chartData","datasets","chartOptions","display","ticks","beginAtZero","xAxes","className","width","height","App","header","initializeComponents","components","renderID","componentID","title","renderComponent","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c7a38731.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass Graph extends Component{\n    constructor(props){\n        super(props);\n        this.colorBase = [];\n        this.integratedChartData = [];\n        this.labels = [];\n        this.values = [];\n        this.colors = [];\n\n    }\n    addBaseColors(rgbValue){\n        this.colorBase.push(rgbValue);\n    }\n    addChartData(dataObject){\n        this.integratedChartData.push(dataObject);\n        this.labels.push(dataObject.label);\n        this.values.push(dataObject.data);\n        this.colors.push(dataObject.backgroundColor);\n    }\n    getLabels(){\n        return this.labels;\n    }\n    getValues(){\n        return this.values;\n    }\n    getColors(){\n        return this.colors;\n    }\n    getIntegratedChartData(){\n        return this.integratedChartData;\n    }\n    popIntegratedChartData(){\n        return this.integratedChartData.pop();\n    }\n    popLabels(){\n        return this.labels.pop();\n    }\n    popValues(){\n        return this.values.pop();\n    }\n    popColors(){\n        return this.colors.pop();\n    }\n    shuffle(a) {\n        var j, x, i;\n        for (i = a.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            x = a[i];\n            a[i] = a[j];\n            a[j] = x;\n        }\n        return a;\n    }\n    random_rgba() {\n        if(this.colorBase.length == 0){\n            var num = Math.round(0xffffff * Math.random());\n            var r = num >> 16;\n            var g = num >> 8 & 255;\n            var b = num & 255;\n            return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n        }else{\n            this.colorBase = this.shuffle(this.colorBase);\n            return this.colorBase.pop();\n        }\n    }\n    isToday(dateParameter) {\n        var today = new Date();\n        return dateParameter.getDate() === today.getDate() && dateParameter.getMonth() === today.getMonth() && dateParameter.getFullYear() === today.getFullYear();\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport Graph from './Graph';\nimport {Line} from 'react-chartjs-2';\n\nclass Cron extends Graph{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tvar parser = require('cron-parser');\n\t\t\n\t\tvar crons = [\n\t\t\t\t\t {cron_label:\"upload\", cron_expression: parser.parseExpression('10 15 * * *')},\n\t\t\t\t\t {cron_label: \"cancel\", cron_expression: parser.parseExpression('20 15 * * *')},\n\t\t\t\t\t];\n\t\t\n\t\tvar dataSetArray= []\n\t\tfor(run=0;run<crons.length;run++){\n\t\t\tvar cron_expression = crons[run].cron_expression\n\t\t\tvar color = this.random_rgba()\n\n\t\t\tvar dataSetObject = {}\n\t\t\tdataSetObject.type = 'line'\n\t\t\tdataSetObject.label = crons[run].cron_label\n\t\t\tdataSetObject.fill = false\n\t\t\tdataSetObject.lineTension = 0.1\n\t\t\tdataSetObject.backgroundColor = color\n\t\t\tdataSetObject.borderColor =  color\n\t\t\tdataSetObject.borderCapStyle = 'butt'\n\t\t\tdataSetObject.borderDash = []\n\t\t\tdataSetObject.borderDashOffset = 0.0\n\t\t\tdataSetObject.borderJoinStyle = 'miter'\n\t\t\tdataSetObject.pointBorderColor = color\n\t\t\tdataSetObject.pointBackgroundColor = '#fff'\n\t\t\tdataSetObject.pointBorderWidth = 10\n\t\t\tdataSetObject.pointHoverRadius = 5\n\t\t\tdataSetObject.pointHoverBackgroundColor = color\n\t\t\tdataSetObject.pointHoverBorderColor = 'rgba(220,220,220,1)'\n\t\t\tdataSetObject.pointHoverBorderWidth = 2\n\t\t\tdataSetObject.pointRadius = 1\n\t\t\tdataSetObject.pointHitRadius = 10\n\t\t\tdataSetObject.pointHitDetectionRadius = 2\n\t\t\tdataSetObject.data = []\n\t\t\tvar interval = new Date(cron_expression.next())\n\t\t\twhile(this.isToday(interval)){\n\t\t\t\tvar dataObject = {}\n\t\t\t\tdataObject.x = interval.getHours()\n\t\t\t\tdataObject.y = interval.getMinutes()\n\t\t\t\tdataSetObject.data.push(dataObject)\n\t\t\t\tinterval = new Date(cron_expression.next())\n\t\t\t}\n\t\t\tdataSetObject.options = {\n\t\t\t\tscales: {\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\ttype: 'time',\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\tunit: 'minute'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdistribution: 'series'\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdataSetArray.push(dataSetObject)\n\t\t}\n\n\t\tvar xAxisValues = []\n\t\tfor(var run=0;run<25;run++){\n\t\t\txAxisValues.push(run);\n\t\t}\n\n\t\tthis.state = {\n\t\t\tchartData:{\n\t\t\t\tlabels:xAxisValues,\n\t\t\t\tdatasets: dataSetArray,\n  \t\t\t\t/*datasets: [\n    \t\t\t\t{\n\t\t\t\t\t\ttype: 'line',\n      \t\t\t\t\tlabel: 'upload.php',\n      \t\t\t\t\tfill: false,\n      \t\t\t\t\tlineTension: 0.1,\n      \t\t\t\t\tbackgroundColor: 'rgba(75,192,192,0.4)',\n      \t\t\t\t\tborderColor: 'rgba(75,192,192,1)',\n      \t\t\t\t\tborderCapStyle: 'butt',\n      \t\t\t\t\tborderDash: [],\n     \t\t\t \t\tborderDashOffset: 0.0,\n      \t\t\t\t\tborderJoinStyle: 'miter',\n      \t\t\t\t\tpointBorderColor: 'rgba(75,192,192,1)',\n      \t\t\t\t\tpointBackgroundColor: '#fff',\n      \t\t\t\t\tpointBorderWidth: 10,\n      \t\t\t\t\tpointHoverRadius: 5,\n      \t\t\t\t\tpointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      \t\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\n      \t\t\t\t\tpointHoverBorderWidth: 2,\n      \t\t\t\t\tpointRadius: 1,\n      \t\t\t\t\tpointHitRadius: 10,\n\t\t\t\t\t\tdata: [{\n\t\t\t\t\t\t\tx: intervalOne.getHours(),\n\t\t\t\t\t\t\ty: intervalOne.getMinutes()\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tx: intervalTwo.getHours(),\n\t\t\t\t\t\t\ty: intervalTwo.getMinutes()\n\t\t\t\t\t\t}],\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\t\t\t\ttype: 'time',\n\t\t\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t\t\tunit: 'minute'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdistribution: 'series'\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n  \t\t\t\t]*/\n\t\t\t},\n\t\t\tchartOptions:{\n    \t\t\tscales: {\n        \t\t\tyAxes: [{\n                        display: true,\n                        ticks: {beginAtZero: true}\n                        }\n                    ],\n\t\t\t\t\txAxes: [{\n            \t\t\tdisplay: true,\n        \t\t\t}]\n\t\t\t\t},\n  \t\t\t\toptions: {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"chart\">\n\t\t\t\t<Line\n\t\t\t\t\tdata={this.state.chartData}\n\t\t\t\t\twidth={100}\n  \t\t\t\t\theight={50}\n\t\t\t\t\toptions={this.state.chartOptions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Cron","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cron from './components/Cron';\n\nclass App extends Component {\n\n  constructor(props){\n  \tsuper(props);\n  \tthis.header = <div className=\"row border-bottom\"><h1 className=\"main-header\">Cron Plotter - Ahsan Mirza</h1></div>\n  \tthis.initializeComponents();\n  }\n\n  initializeComponents() {\n  \tthis.components = [];\n\t\tthis.components['Cron'] = {renderID:<Cron />}\n  }\n\n  renderComponent(componentID) {\n  \treturn\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-lg-12 col-md-12 col-sm-12 text-center mt-3 mb-3\">\n\t\t\t\t\t\t{this.components[componentID].title}\n        \t\t\t</div>\n        \t\t\t<div className=\"col-lg-12 col-md-12 col-sm-12 border-top border-bottom\">\n        \t\t\t\t{this.components[componentID].renderID}\n        \t\t\t</div>\n        \t\t</div>\n\t}\n\t\n  render() {\n    return (\n      \t<div className=\"container\">\n\t\t\t\t\t{this.header}\n\t\t\t\t\t{this.renderComponent('Cron')}\n\t\t\t\t\t<footer className=\"page-footer font-small blue\">\n  \t\t\t\t\t<div className=\"footer-copyright text-center py-3\">© 2019 Copyright:\n    \t\t\t\t\t<a href=\"http://ahsanmirza.com\"> Ahsan mirza</a>\n  \t\t\t\t\t</div>\n\t\t\t\t\t</footer>\n      \t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}