{"version":3,"sources":["components/Graph.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Graph","props","addInputForm","bind","removeInputform","handleNameChange","handleDateChange","handleCronExpressionChange","colorBase","intializeChart","a","j","x","i","length","Math","floor","random","this","num","round","shuffle","pop","date","dateParameter","getDate","getMonth","getFullYear","cron_object","date_start","cron_expression","color","random_rgba","dataSetObject","label","cron_label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","pointHitDetectionRadius","data","interval","Date","next","isEqualDate","dataObject","getHours","y","getMinutes","push","options","scales","yAxes","type","time","unit","distribution","responsive","today","setDate","setHours","require","cron_options","currentDate","xAxisValues","run","state","cron_names","cron_expressions","formInputs","chartData","labels","datasets","chartOptions","stacked","ticks","beginAtZero","min","max","xAxes","tooltips","callbacks","title","tooltipItem","datasetIndex","hour","index","hour_period","minute","value","test","event","parseInt","target","getAttribute","setState","parser","dataSetArray","getDataobject","parseExpression","error","formInputArray","cron_name_name","cron_expression_name","cron_names_array","concat","cron_expression_array","action","className","defaultValue","name","onChange","placeholder","selected","map","formInput","onClick","width","height","Component","App","header","initializeComponents","components","renderID","componentID","renderComponent","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7c235b74.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport {Scatter} from 'react-chartjs-2';\nimport DatePicker from \"react-datepicker\";\nclass Graph extends Component{\n    constructor(props){\n        super(props);\n        this.addInputForm = this.addInputForm.bind(this);\n        this.removeInputform = this.removeInputform.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handleCronExpressionChange = this.handleCronExpressionChange.bind(this);\n        this.colorBase = [];\n        this.intializeChart();\n        this.addInputForm();\n    }\n\tshuffle(a) {\n\t\tvar j, x, i;\n\t\tfor (i = a.length - 1; i > 0; i--) {\n\t\t\t\tj = Math.floor(Math.random() * (i + 1));\n\t\t\t\tx = a[i];\n\t\t\t\ta[i] = a[j];\n\t\t\t\ta[j] = x;\n\t\t}\n\t\treturn a;\n\t}\n\trandom_rgba() {\n\t\tif(this.colorBase.length == 0){\n\t\t\t\tvar num = Math.round(0xffffff * Math.random());\n\t\t\t\tvar r = num >> 16;\n\t\t\t\tvar g = num >> 8 & 255;\n\t\t\t\tvar b = num & 255;\n\t\t\t\treturn 'rgb(' + r + ', ' + g + ', ' + b + ')';\n\t\t}else{\n\t\t\t\tthis.colorBase = this.shuffle(this.colorBase);\n\t\t\t\treturn this.colorBase.pop();\n\t\t}\n    }\n    random_minute() {\n        var minute = Math.floor(Math.random() * 23)\n        return minute\n    }\n    random_hour() {\n        return Math.floor(Math.random() * 20)\n    }\n\tisEqualDate(date,dateParameter) {\n        return dateParameter.getDate() === date.getDate() && dateParameter.getMonth() === date.getMonth() && dateParameter.getFullYear() === date.getFullYear();\n    }\n    getDataobject(cron_object,date_start){\n        var cron_expression = cron_object.cron_expression\n        var color = this.random_rgba()\n\n   \t\tvar dataSetObject = {}\n   \t\tdataSetObject.type = ''\n   \t\tdataSetObject.label = cron_object.cron_label\n   \t\tdataSetObject.fill = false\n   \t\tdataSetObject.lineTension = 0.0\n   \t\tdataSetObject.backgroundColor = color\n   \t\tdataSetObject.borderColor =  color\n   \t\tdataSetObject.borderCapStyle = 'butt'\n   \t\tdataSetObject.borderDash = []\n   \t\tdataSetObject.borderDashOffset = 0.0\n   \t\tdataSetObject.borderJoinStyle = 'miter'\n   \t\tdataSetObject.pointBorderColor = color\n   \t\tdataSetObject.pointBackgroundColor = '#fff'\n   \t\tdataSetObject.pointBorderWidth = 10\n   \t\tdataSetObject.pointHoverRadius = 5\n   \t\tdataSetObject.pointHoverBackgroundColor = color\n   \t\tdataSetObject.pointHoverBorderColor = 'rgba(220,220,220,1)'\n   \t\tdataSetObject.pointHoverBorderWidth = 2\n   \t\tdataSetObject.pointRadius = 1\n   \t\tdataSetObject.pointHitRadius = 10\n   \t\tdataSetObject.pointHitDetectionRadius = 2\n   \t\tdataSetObject.data = []\n   \t\tvar interval = new Date(cron_expression.next())\n   \t\t//console.log(interval)\n   \t\t//By Default graph plotted will be for tomorrow\n   \t\twhile(this.isEqualDate(date_start,interval)){\n\t   \t\tvar dataObject = {}\n\t   \t\tdataObject.x = interval.getHours()\n\t   \t\tdataObject.y = interval.getMinutes()\n\t   \t\tdataSetObject.data.push(dataObject)\n\t   \t\tinterval = new Date(cron_expression.next())\n   \t\t}\n   \t\tdataSetObject.options = {\n\t   \t\tscales: {\n\t\t   \t\tyAxes: [{\n\t\t\t   \t\ttype: 'time',\n\t\t\t   \t\ttime: {\n\t\t\t\t   \t\tunit: 'minute',\n\t\t\t   \t\t},\n\t\t\t   \t\tdistribution: 'series',\n\t\t   \t\t}]\n\t   \t\t},\n\t   \t\tresponsive: true,\n        }\n        return dataSetObject;\n    }\n\tintializeChart(){\n\n\t\tvar today = new Date();\n\t\tvar date_start = new Date();\n\t\tdate_start.setDate(today.getDate()+1);\n\t\tdate_start.setHours(0,0,0,0);\n\n\t\tvar parser = require('cron-parser');\n\t\tvar cron_options = {\n\t\t\tcurrentDate: date_start,\n\t\t};\n\n\n\t\tvar dataSetArray= []\n\t\t\n\t\tvar xAxisValues = []\n\t\tfor(var run=0;run<25;run++){\n\t\t\txAxisValues.push(run);\n\t\t}\n\n\t\tthis.state = {\n            date_start: date_start,\n            cron_options: cron_options,\n            //crons: crons,\n            cron_names: [],\n            cron_expressions: [],\n            formInputs: [],\n            xAxisValues: xAxisValues,\n\t\t\tchartData:{\n\t\t\t\tlabels:xAxisValues,\n\t\t\t\tdatasets: dataSetArray,\n\t\t\t},\n\t\t\tchartOptions:{\n    \t\t\tscales: {\n        \t\t\tyAxes: [{\n\t\t\t\t\t\tstacked: false,\n  \t\t\t\t\t\tticks: {\n    \t\t\t\t\t\tbeginAtZero: true,\n    \t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 60\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\tstacked: false,\n  \t\t\t\t\t\tticks: {\n    \t\t\t\t\t\tbeginAtZero: true,\n    \t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 24\n\t\t\t\t\t\t}\n        \t\t\t}]\n\t\t\t\t},\n\t\t\t\ttooltips: {\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\ttitle: function(tooltipItem, data) {\n\t\t\t\t\t\t\tvar dataset = data.datasets[tooltipItem[0].datasetIndex]\n\t\t\t\t\t\t\treturn dataset.label\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\t\t\t//console.log(tooltipItem)\n\t\t\t\t\t\t\t//console.log(data)\n\t\t\t\t\t\t\tvar dataset = data.datasets[tooltipItem.datasetIndex]\n\t\t\t\t\t\t\tvar hour=dataset.data[tooltipItem.index].x\n\t\t\t\t\t\t\tvar hour_period = \"am\"\n\t\t\t\t\t\t\tif(hour > 11){\n\t\t\t\t\t\t\t\thour_period = \"pm\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar minute = tooltipItem.value\n\t\t\t\t\t\t\tif (/^\\d$/.test(minute))  {\n\t\t\t\t\t\t\t\tminute = \"0\" + minute\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\treturn hour + \":\" + minute + \" \" + hour_period\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\t}\n\thandleNameChange(event) {\n        var cron_names = this.state.cron_names;\n        var index = parseInt(event.target.getAttribute('index'));\n        cron_names[index] = event.target.value\n        this.setState({cron_names:cron_names})\n        this.chartData()\n    };\n    handleCronExpressionChange(event) {\n        var cron_expressions = this.state.cron_expressions;\n        var index = parseInt(event.target.getAttribute('index'));\n        cron_expressions[index] = event.target.value\n        this.setState({cron_expressions:cron_expressions})\n        this.chartData()\n    }\n    handleDateChange(event){\n        var date_start = event\n\t\tdate_start.setHours(0,0,0,0);\n        this.setState({date_start:event});\n        this.chartData();\n    }\n    chartData(){\n        this.setState({chartData: {labels:this.state.xAxisValues,datasets:[]}})\n        var parser = require('cron-parser');\n        var dataSetArray = []\n        for(var run=0;run<this.state.cron_expressions.length;run++){\n            if(typeof this.state.cron_names[run] !== \"undefined\" && this.state.cron_names[run].length !=0 && this.state.cron_expressions[run] !== \"undefined\" && this.state.cron_expressions[run].length >= 9){\n                try {\n                    dataSetArray.push(this.getDataobject({cron_label:this.state.cron_names[run],cron_expression: parser.parseExpression(this.state.cron_expressions[run],this.state.cron_options)},this.state.date_start))\n                }catch(error){\n                    //console.log\n                }\n            }\n        }\n        this.setState({chartData: {labels:this.state.xAxisValues,datasets:dataSetArray}})\n    }\n    addInputForm(event) {\n        var formInputArray = this.state.formInputs\n        var index = formInputArray.length\n        var cron_name_name = \"name_\"+index\n        var cron_expression_name = \"cron_expression_\"+index\n        var cron_names_array = this.state.cron_names.concat(\"\");\n        this.setState({cron_names: cron_names_array});\n        var cron_expression_array = this.state.cron_expressions.concat(\"\")\n        this.setState({cron_expressions: cron_expression_array})\n        formInputArray.push(<form action=\"\" className=\"form-inline mt-3\">\n                    <div className=\"w-25\"></div>\n                    <div className=\"form-group w-25 mr-5\">\n                        <input defaultValue=\"\" index={index} name={cron_name_name} onChange={this.handleNameChange} type=\"text\" className=\"form-control\" placeholder=\"Cron Name\" />\n                    </div>\n                    <div className=\"form-group w-25\">\n                        <input index={index} name={cron_expression_name} onChange={this.handleCronExpressionChange} type=\"text\" className=\"form-control\"  placeholder=\"Cron expression\" />\n                    </div>\n                    <div className=\"w-25\"></div>\n                </form>)\n        this.setState({formInputs: formInputArray})\n    }\n    removeInputform(event) {\n        var formInputs =  this.state.formInputs;\n        if(formInputs.length > 1){\n            formInputs.pop()\n            var cron_names = this.state.cron_names;\n            cron_names.pop();\n            var cron_expressions = this.state.cron_expressions;\n            cron_expressions.pop();\n            this.setState({cron_names:cron_names})\n            this.setState({cron_expressions:cron_expressions});\n            this.setState({formInputs: formInputs});\n            this.chartData()\n        }\n    }\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"chart\">\n                <div className=\"w-100 mt-3 mb-3 text-center\">\n                    <div className=\"ml-10\">\n                        <span className=\"mr-3\">Date Picker:</span>\n                        <DatePicker \n                            selected={this.state.date_start}\n                            onChange={this.handleDateChange}\n                        />\n                    </div>\n                </div>\n               {this.state.formInputs.map(function(formInput){return formInput})}\n               <div className=\"mt-3 mb-3 text-center\">\n                    <button name=\"addInputForm\" className=\"btn btn-info w-50\" onClick={this.addInputForm}>Add Input form</button>\n                </div>\n                <div className=\"mt-3 mb-3 text-center\">\n                    <button name=\"removeInputForm\" className=\"btn btn-danger w-50\" onClick={this.removeInputform}>Remove Input form</button>\n                </div>\n\t\t\t\t<Scatter\n\t\t\t\t\tdata={this.state.chartData}\n\t\t\t\t\twidth={70}\n  \t\t\t\t\theight={30}\n\t\t\t\t\toptions={this.state.chartOptions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n}\n\nexport default Graph","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from './components/Graph';\n\nclass App extends Component {\n\n  constructor(props){\n  \tsuper(props);\n  \tthis.header = <div className=\"row mt-3\"><h1 className=\"main-header text-center w-100\">Cron Plotter - Ahsan Mirza</h1></div>\n  \tthis.initializeComponents();\n  }\n\n  initializeComponents() {\n  \tthis.components = [];\n\t\tthis.components['Graph'] = {renderID:<Graph />}\n  }\n\n  renderComponent(componentID) {\n  \treturn\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-lg-12 col-md-12 col-sm-12 text-center mt-3 mb-3\">\n\t\t\t\t\t\t{this.components[componentID].title}\n        \t\t\t</div>\n        \t\t\t<div className=\"col-lg-12 col-md-12 col-sm-12 border-top border-bottom\">\n        \t\t\t\t{this.components[componentID].renderID}\n        \t\t\t</div>\n        \t\t</div>\n\t}\n\t\n  render() {\n    return (\n      \t<div className=\"container\">\n\t\t\t\t\t{this.header}\n\t\t\t\t\t{this.renderComponent('Graph')}\n\t\t\t\t\t<footer className=\"page-footer font-small blue\">\n  \t\t\t\t\t<div className=\"footer-copyright text-center py-3\">© 2019 Copyright:\n    \t\t\t\t\t<a href=\"http://ahsanmirza.com\"> Ahsan mirza</a>\n  \t\t\t\t\t</div>\n\t\t\t\t\t</footer>\n      \t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}